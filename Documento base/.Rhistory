#| fig-width: 5
#| fig-height: 3.5
sim_res <- DHARMa::simulateResiduals(fittedModel = modelo_seleccionado)
#| label: fig-dispersion-residuos2
#| echo: false
#| warning: false
#| fig-cap: "Dispersión de los residuos simulados frente a los valores predichos."
#| fig-width: 5
#| fig-height: 3.5
plotResiduals(sim_res)
#| label: fig-qqplot-residuos2
#| echo: false
#| warning: false
#| fig-cap: "QQ-plot de los residuos simulados del modelo mixto."
#| fig-width: 5
#| fig-height: 3.5
sim_res <- DHARMa::simulateResiduals(fittedModel = modelo_seleccionado)
#| label: fig-test-residuos2
#| echo: false
#| warning: false
#| fig-cap: "Resultados del test formal de uniformidad aplicado a los residuos simulados."
testResiduals(sim_res)
library(dplyr)
library(knitr)
# Unir rankings de 2024 y 2025
comparativa <- left_join(ranking_2025, ranking_2024, by = "country") %>%
rename(score_2025 = happiness_pred_2025,
score_2024 = happiness_score) %>%
select(country, score_2025, rank, score_2024, rank_2024)
# Top 10
top_10 <- comparativa %>% slice_min(rank, n = 10) %>%
mutate(section = "Top 10")
# Bottom 10
bottom_10 <- comparativa %>% slice_max(rank, n = 10) %>%
mutate(section = "Bottom 10")
# Contexto España (2 por encima y 2 por debajo)
pos_spain <- comparativa %>% filter(country == "Spain") %>% pull(rank)
contexto_spain <- comparativa %>%
filter(rank >= pos_spain - 2 & rank <= pos_spain + 2) %>%
mutate(section = "España ±2 posiciones")
# Unir todo
tabla_final <- bind_rows(top_10, contexto_spain, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España ±2 posiciones", "Bottom 10")), rank)
# Mostrar como tabla
kable(tabla_final, caption = "Comparación del ranking de felicidad en 2025 y 2024 (Top, España, Bottom)",
col.names = c("País", "Score 2025", "Ranking 2025", "Score 2024", "Ranking 2024", "Sección"))
# Cargar librerías necesarias
library(lme4)
library(dplyr)
# Crear una copia de la base de datos para 2025
datos_2025 <- df_unificado
# Sustituimos el valor del año por 2025 en todas las observaciones
datos_2025$year <- 2025
# Realizamos la predicción utilizando el modelo mixto
# allow.new.levels = TRUE permite predecir incluso si hay países nuevos o no observados
datos_2025$happiness_pred_2025 <- predict(modelo_seleccionado, newdata = datos_2025, allow.new.levels = TRUE)
# Agrupar por país y calcular la media de felicidad predicha en 2025 (si hay varias filas por país)
ranking_2025 <- datos_2025 %>%
group_by(country) %>%
summarise(happiness_pred_2025 = mean(happiness_pred_2025, na.rm = TRUE)) %>%
arrange(desc(happiness_pred_2025)) %>%
mutate(rank = row_number())
# Mostrar top 10
print(head(ranking_2025, 10))
# Mostrar bottom 10
print(tail(ranking_2025, 10))
ranking_2025 %>%
filter(country == "Spain")
ranking_2024 <- df_unificado %>%
filter(year == 2024) %>%
select(country, happiness_score) %>%
arrange(desc(happiness_score)) %>%
mutate(rank_2024 = row_number())
ranking_2024 %>%
filter(country == "Spain")
library(dplyr)
library(knitr)
# Unir rankings de 2024 y 2025
comparativa <- left_join(ranking_2025, ranking_2024, by = "country") %>%
rename(score_2025 = happiness_pred_2025,
score_2024 = happiness_score) %>%
select(country, score_2025, rank, score_2024, rank_2024)
# Top 10
top_10 <- comparativa %>% slice_min(rank, n = 10) %>%
mutate(section = "Top 10")
# Bottom 10
bottom_10 <- comparativa %>% slice_max(rank, n = 10) %>%
mutate(section = "Bottom 10")
# Contexto España (2 por encima y 2 por debajo)
pos_spain <- comparativa %>% filter(country == "Spain") %>% pull(rank)
contexto_spain <- comparativa %>%
filter(rank >= pos_spain - 2 & rank <= pos_spain + 2) %>%
mutate(section = "España ±2 posiciones")
# Unir todo
tabla_final <- bind_rows(top_10, contexto_spain, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España ±2 posiciones", "Bottom 10")), rank)
# Mostrar como tabla
kable(tabla_final, caption = "Comparación del ranking de felicidad en 2025 y 2024 (Top, España, Bottom)",
col.names = c("País", "Score 2025", "Ranking 2025", "Score 2024", "Ranking 2024", "Sección"))
View(df_modelo)
View(df_original)
library(dplyr)
library(knitr)
# Unir rankings de 2024 y 2025
comparativa <- left_join(ranking_2025, ranking_2024, by = "country") %>%
rename(score_2025 = happiness_pred_2025,
score_2024 = happiness_score) %>%
select(country, score_2025, rank, score_2024, rank_2024)
# Top 10
top_10 <- comparativa %>% slice_min(rank, n = 10) %>%
mutate(section = "Top 10")
# Bottom 10
bottom_10 <- comparativa %>% slice_max(rank, n = 10) %>%
mutate(section = "Bottom 10")
# Contexto España (2 por encima y 2 por debajo)
pos_spain <- comparativa %>% filter(country == "Spain") %>% pull(rank)
contexto_spain <- comparativa %>%
filter(rank >= pos_spain - 2 & rank <= pos_spain + 2) %>%
mutate(section = "España ±2 posiciones")
# Unir todo
tabla_final <- bind_rows(top_10, contexto_spain, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España ±2 posiciones", "Bottom 10")), rank)
# Mostrar como tabla
kable(tabla_final, caption = "Comparación del ranking de felicidad en 2025 y 2024 (Top, España, Bottom)",
col.names = c("País", "Score 2025", "Ranking 2025", "Score 2024", "Ranking 2024", "Sección"))
library(dplyr)
library(knitr)
# Unir rankings de 2024 y 2025
comparativa <- left_join(ranking_2025, ranking_2024, by = "country") %>%
rename(score_2025 = happiness_pred_2025,
score_2024 = happiness_score) %>%
select(country, score_2025, rank, score_2024, rank_2024)
# Top 10
top_10 <- comparativa %>% slice_min(rank, n = 10) %>%
mutate(section = "Top 10")
# Bottom 10
bottom_10 <- comparativa %>% slice_max(rank, n = 10) %>%
mutate(section = "Bottom 10")
# Contexto España (2 por encima y 2 por debajo)
pos_spain <- comparativa %>% filter(country == "Spain") %>% pull(rank)
# Unir todo
tabla_final <- bind_rows(top_10, pos_spain, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España ±2 posiciones", "Bottom 10")), rank)
library(dplyr)
library(knitr)
# Unir rankings de 2024 y 2025
comparativa <- left_join(ranking_2025, ranking_2024, by = "country") %>%
rename(score_2025 = happiness_pred_2025,
score_2024 = happiness_score) %>%
select(country, score_2025, rank, score_2024, rank_2024)
# Top 10
top_10 <- comparativa %>% slice_min(rank, n = 10) %>%
mutate(section = "Top 10")
# España sola
espana <- comparativa %>%
filter(country == "Spain") %>%
mutate(section = "España")
# Bottom 10
bottom_10 <- comparativa %>% slice_max(rank, n = 10) %>%
mutate(section = "Bottom 10")
# Unir todo
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España", "Bottom 10")), rank)
# Mostrar como tabla
kable(tabla_final, caption = "Comparación del ranking de felicidad en 2025 y 2024 (Top, España, Bottom)",
col.names = c("País", "Score 2025", "Ranking 2025", "Score 2024", "Ranking 2024", "Sección"))
library(dplyr)
library(knitr)
# Unir rankings de 2024 y 2025
comparativa <- left_join(ranking_2025, ranking_2024, by = "country") %>%
rename(score_2025 = happiness_pred_2025,
score_2024 = happiness_score) %>%
select(country, score_2025, rank, score_2024, rank_2024)
# Top 10
top_10 <- comparativa %>% slice_min(rank, n = 10) %>%
mutate(section = "Top 10")
# España sola
espana <- comparativa %>%
filter(country == "Spain") %>%
mutate(section = "España")
# Bottom 10
bottom_10 <- comparativa %>% slice_max(rank, n = 10) %>%
mutate(section = "Bottom 10")
# Unir todo
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank)
# Mostrar como tabla
kable(tabla_final, caption = "Comparación del ranking de felicidad en 2025 y 2024 (Top, España, Bottom)",
col.names = c("País", "Score 2025", "Ranking 2025", "Score 2024", "Ranking 2024", "Sección"))
library(dplyr)
library(knitr)
# Unir rankings de 2024 y 2025
comparativa <- left_join(ranking_2025, ranking_2024, by = "country") %>%
rename(score_2025 = happiness_pred_2025,
score_2024 = happiness_score) %>%
select(country, score_2025, rank, score_2024, rank_2024)
# Top 10
top_10 <- comparativa %>% slice_min(rank, n = 10) %>%
mutate(section = "Top 10")
# España sola
espana <- comparativa %>%
filter(country == "Spain") %>%
mutate(section = "España")
# Bottom 10
bottom_10 <- comparativa %>% slice_max(rank, n = 10) %>%
mutate(section = "Últimos 10")
# Unir todo
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank)
# Mostrar como tabla
kable(tabla_final, caption = "Comparación del ranking de felicidad en 2025 y 2024 (Top, España, Bottom)",
col.names = c("País", "Score 2025", "Ranking 2025", "Score 2024", "Ranking 2024", "Sección"))
# Cargar librerías necesarias
library(glmmTMB)
library(MuMIn)
library(DHARMa)
library(tidyverse)
# Modelo GLMM válido
glmm_valido <- glmmTMB(
happiness_score ~ support + life_exp + (1 + regional_indicator | country),
data = df_unificado,
family = Gamma(link = "log"),
na.action = na.fail
)
summary(glmm_valido)
library(performance)
r2(glmm_valido)
library(dplyr)
library(knitr)
# Unir rankings de 2024 y 2025
comparativa <- left_join(ranking_glmm_2025, ranking_2024, by = "country") %>%
rename(score_2025 = happiness_pred_2025,
score_2024 = happiness_score) %>%
select(country, score_2025, rank, score_2024, rank_2024)
# Top 10
top_10 <- comparativa %>% slice_min(rank, n = 10) %>%
mutate(section = "Top 10")
# España sola
espana <- comparativa %>%
filter(country == "Spain") %>%
mutate(section = "España")
# Bottom 10
bottom_10 <- comparativa %>% slice_max(rank, n = 10) %>%
mutate(section = "Últimos 10")
# Unir todo
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank)
# Mostrar como tabla
kable(tabla_final, caption = "Comparación del ranking de felicidad en 2025 y 2024 (Top, España, Bottom)",
col.names = c("País", "Score 2025", "Ranking 2025", "Score 2024", "Ranking 2024", "Sección"))
library(dplyr)
library(knitr)
# Crear un ranking 2025 a partir del GLMM
ranking_glmm_2025 <- datos_2025 %>%
group_by(country) %>%
summarise(score_2025_glmm = mean(happiness_pred_2025, na.rm = TRUE)) %>%
arrange(desc(score_2025_glmm)) %>%
mutate(rank_glmm = row_number())
# Unir rankings del LMM, GLMM y datos reales de 2024
comparativa_total <- ranking_2025 %>%
rename(score_2025_lmm = happiness_pred_2025, rank_lmm = rank) %>%
left_join(ranking_glmm_2025, by = "country") %>%
left_join(ranking_2024, by = "country") %>%
rename(score_2024 = happiness_score)
# Seleccionar y renombrar columnas relevantes
comparativa_total <- comparativa_total %>%
select(country, score_2025_lmm, rank_lmm, score_2025_glmm, rank_glmm, score_2024, rank_2024)
# Filtrar top 10, España y bottom 10 según LMM
top_10 <- comparativa_total %>% slice_min(rank_lmm, n = 10) %>%
mutate(section = "Top 10")
espana <- comparativa_total %>%
filter(country == "Spain") %>%
mutate(section = "España")
bottom_10 <- comparativa_total %>% slice_max(rank_lmm, n = 10) %>%
mutate(section = "Últimos 10")
# Unir todo y mostrar como tabla
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank_lmm)
# Mostrar con kable
kable(tabla_final, caption = "Comparación del ranking de felicidad en 2025 (LMM y GLMM) y 2024",
col.names = c("País", "Score 2025 (LMM)", "Ranking 2025 (LMM)",
"Score 2025 (GLMM)", "Ranking 2025 (GLMM)",
"Score 2024", "Ranking 2024", "Sección"))
library(dplyr)
library(knitr)
# Crear un ranking 2025 a partir del GLMM
ranking_glmm_2025 <- datos_2025 %>%
group_by(country) %>%
summarise(score_2025_glmm = mean(happiness_pred_2025, na.rm = TRUE)) %>%
arrange(desc(score_2025_glmm)) %>%
mutate(rank_glmm = row_number())
# Unir rankings del LMM, GLMM y datos reales de 2024
comparativa_total <- ranking_2025 %>%
rename(score_2025_lmm = happiness_pred_2025, rank_lmm = rank) %>%
left_join(ranking_glmm_2025, by = "country") %>%
left_join(ranking_2024, by = "country") %>%
rename(score_2024 = happiness_score)
# Seleccionar y renombrar columnas relevantes
comparativa_total <- comparativa_total %>%
select(country, score_2025_lmm, rank_lmm, score_2025_glmm, rank_glmm, score_2024, rank_2024)
# Filtrar top 10, España y bottom 10 según LMM
top_10 <- comparativa_total %>% slice_min(rank_lmm, n = 10) %>%
mutate(section = "Top 10")
espana <- comparativa_total %>%
filter(country == "Spain") %>%
mutate(section = "España")
bottom_10 <- comparativa_total %>% slice_max(rank_lmm, n = 10) %>%
mutate(section = "Últimos 10")
# Unir todo y mostrar como tabla
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank_lmm)
# Mostrar con kable
kable(tabla_final, caption = "Comparación del ranking de felicidad en 2025 (LMM y GLMM) y 2024",
col.names = c("País", "Score 2025 (LMM)", "Ranking 2025 (LMM)",
"Score 2025 (GLMM)", "Ranking 2025 (GLMM)",
"Score 2024", "Ranking 2024", "Sección"))
library(dplyr)
library(knitr)
# Crear copia para predicciones LMM
datos_2025_lmm <- df_unificado
datos_2025_lmm$year <- 2025
# Predecir con el modelo LMM
datos_2025_lmm$happiness_pred_2025_lmm <- predict(modelo_seleccionado, newdata = datos_2025_lmm, allow.new.levels = TRUE)
# Crear ranking LMM
ranking_lmm_2025 <- datos_2025_lmm %>%
group_by(country) %>%
summarise(score_2025_lmm = mean(happiness_pred_2025_lmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_lmm)) %>%
mutate(rank_lmm = row_number())
# Crear copia para predicciones GLMM
datos_2025_glmm <- df_unificado
datos_2025_glmm$year <- 2025
# Predecir con el modelo GLMM
datos_2025_glmm$happiness_pred_2025_glmm <- predict(glmm_valido, newdata = datos_2025_glmm, type = "response", allow.new.levels = TRUE)
# Crear ranking GLMM
ranking_glmm_2025 <- datos_2025_glmm %>%
group_by(country) %>%
summarise(score_2025_glmm = mean(happiness_pred_2025_glmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_glmm)) %>%
mutate(rank_glmm = row_number())
ranking_2024 <- df_unificado %>%
filter(year == 2024) %>%
group_by(country) %>%
summarise(score_2024 = mean(happiness_score, na.rm = TRUE)) %>%
arrange(desc(score_2024)) %>%
mutate(rank_2024 = row_number())
library(knitr)
# Unir todos los rankings por país
comparativa_total <- ranking_lmm_2025 %>%
left_join(ranking_glmm_2025, by = "country") %>%
left_join(ranking_2024, by = "country")
# Top 10, España, Bottom 10 (según LMM)
top_10 <- comparativa_total %>% slice_min(rank_lmm, n = 10) %>% mutate(section = "Top 10")
espana <- comparativa_total %>% filter(country == "Spain") %>% mutate(section = "España")
bottom_10 <- comparativa_total %>% slice_max(rank_lmm, n = 10) %>% mutate(section = "Últimos 10")
# Unir todo y mostrar
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank_lmm)
kable(tabla_final,
caption = "Comparación del ranking de felicidad en 2025 (LMM y GLMM) y 2024",
col.names = c("País", "Score 2025 (LMM)", "Ranking 2025 (LMM)",
"Score 2025 (GLMM)", "Ranking 2025 (GLMM)",
"Score 2024", "Ranking 2024", "Sección"))
# Cargar librerías necesarias
library(glmmTMB)
library(dplyr)
# Crear una copia del dataset para 2025
datos_2025 <- df_unificado
datos_2025$year <- 2025
# Realizar predicción usando el modelo GLMM válido
# allow.new.levels = TRUE permite predecir aunque haya países nuevos o no observados en la estimación
datos_2025$happiness_pred_2025 <- predict(glmm_valido, newdata = datos_2025, type = "response", allow.new.levels = TRUE)
# Agrupar por país y calcular la media (por si hay múltiples filas por país)
ranking_glmm_2025 <- datos_2025 %>%
group_by(country) %>%
summarise(happiness_pred_2025 = mean(happiness_pred_2025, na.rm = TRUE)) %>%
arrange(desc(happiness_pred_2025)) %>%
mutate(rank = row_number())
# Mostrar el top 10 y bottom 10 del ranking
print(head(ranking_glmm_2025, 10))
print(tail(ranking_glmm_2025, 10))
# Predicción específica para España
ranking_glmm_2025 %>% filter(country == "Spain")
# Comparación con 2024
ranking_2024 <- df_unificado %>%
filter(year == 2024) %>%
select(country, happiness_score) %>%
group_by(country) %>%
summarise(happiness_score = mean(happiness_score, na.rm = TRUE)) %>%
arrange(desc(happiness_score)) %>%
mutate(rank_2024 = row_number())
# Puntuación y ranking de España en 2024
ranking_2024 %>% filter(country == "Spain")
library(dplyr)
library(knitr)
# Crear copia para predicciones LMM
datos_2025_lmm <- df_unificado
datos_2025_lmm$year <- 2025
# Predecir con el modelo LMM
datos_2025_lmm$happiness_pred_2025_lmm <- predict(modelo_seleccionado, newdata = datos_2025_lmm, allow.new.levels = TRUE)
# Crear ranking LMM
ranking_lmm_2025 <- datos_2025_lmm %>%
group_by(country) %>%
summarise(score_2025_lmm = mean(happiness_pred_2025_lmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_lmm)) %>%
mutate(rank_lmm = row_number())
# Crear copia para predicciones GLMM
datos_2025_glmm <- df_unificado
datos_2025_glmm$year <- 2025
# Predecir con el modelo GLMM
datos_2025_glmm$happiness_pred_2025_glmm <- predict(glmm_valido, newdata = datos_2025_glmm, type = "response", allow.new.levels = TRUE)
# Crear ranking GLMM
ranking_glmm_2025 <- datos_2025_glmm %>%
group_by(country) %>%
summarise(score_2025_glmm = mean(happiness_pred_2025_glmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_glmm)) %>%
mutate(rank_glmm = row_number())
ranking_2024 <- df_unificado %>%
filter(year == 2024) %>%
group_by(country) %>%
summarise(score_2024 = mean(happiness_score, na.rm = TRUE)) %>%
arrange(desc(score_2024)) %>%
mutate(rank_2024 = row_number())
library(knitr)
# Unir todos los rankings por país
comparativa_total <- ranking_lmm_2025 %>%
left_join(ranking_glmm_2025, by = "country") %>%
left_join(ranking_2024, by = "country")
# Top 10, España, Bottom 10 (según LMM)
top_10 <- comparativa_total %>% slice_min(rank_lmm, n = 10) %>% mutate(section = "Top 10")
espana <- comparativa_total %>% filter(country == "Spain") %>% mutate(section = "España")
bottom_10 <- comparativa_total %>% slice_max(rank_lmm, n = 10) %>% mutate(section = "Últimos 10")
# Unir todo y mostrar
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank_lmm)
kable(tabla_final,
caption = "Comparación del ranking de felicidad en 2025 (LMM y GLMM) y 2024",
col.names = c("País", "Score 2025 (LMM)", "Ranking 2025 (LMM)",
"Score 2025 (GLMM)", "Ranking 2025 (GLMM)",
"Score 2024", "Ranking 2024", "Sección"))
citation("shiny")
library(performance)
r2(glmm_valido)
# Cargar librerías necesarias
library(glmmTMB)
library(MuMIn)
library(DHARMa)
library(tidyverse)
# Modelo GLMM válido
glmm_valido <- glmmTMB(
happiness_score ~ support + life_exp + (1 + regional_indicator | country),
data = df_unificado,
family = Gamma(link = "log"),
na.action = na.fail
)
summary(glmm_valido)
library(performance)
r2(glmm_valido)
# Cargar librerías necesarias
library(lme4)
library(MuMIn)
library(DHARMa)
# Ajustar el modelo base para selección (con df_unificado y na.fail)
modelo_base <- lmer(
happiness_score ~ regional_indicator + gdp + support + life_exp + freedom +
generosity + corruption + status + political_rights + civil_liberties +
fair_election + regime_category + democracy + electoral_category +
presidential + alternation + year +
(1 + year | country),
data = df_unificado,
REML = FALSE,
na.action = na.fail
)
# Aplicar selección por AIC
# modelos_dredge <- dredge(modelo_base, trace = FALSE)
# modelo_seleccionado <- get.models(modelos_dredge, 1)[[1]]
modelo_seleccionado <- modelo_base <- lmer(
happiness_score ~ civil_liberties + electoral_category + freedom +
gdp + life_exp + political_rights + regime_category + regional_indicator +
status + support + year + (1 + year | country),
data = df_unificado,
REML = FALSE,
na.action = na.fail
)
library(performance)
# Calcular R²
r2_vals <- r2(modelo_seleccionado)
# Extraer el R² marginal
r2_marginal <- r2_vals$R2_marginal
# Extraer el R² condicional
r2_conditional <- r2_vals$R2_conditional
# MEJOR LMM
r2_marginal
r2_conditional
# MODELO LMM
r2_marginal
r2_conditional
library(performance)
r2(glmm_valido)
shiny::runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
?glmmTMB
??glmmTMB
glmmTMB::glmmTMB(family=?)
?glmmTMB::family.glmmTMB
??glmmTMB::family.glmmTMB

library(dplyr)
library(knitr)
# Crear copia para predicciones LMM
datos_2025_lmm <- df_unificado
datos_2025_lmm$year <- 2025
# Predecir con el modelo LMM
datos_2025_lmm$happiness_pred_2025_lmm <- predict(modelo_seleccionado, newdata = datos_2025_lmm, allow.new.levels = TRUE)
# Crear ranking LMM
ranking_lmm_2025 <- datos_2025_lmm %>%
group_by(country) %>%
summarise(score_2025_lmm = mean(happiness_pred_2025_lmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_lmm)) %>%
mutate(rank_lmm = row_number())
# Crear copia para predicciones GLMM
datos_2025_glmm <- df_unificado
datos_2025_glmm$year <- 2025
# Predecir con el modelo GLMM
datos_2025_glmm$happiness_pred_2025_glmm <- predict(glmm_valido, newdata = datos_2025_glmm, type = "response", allow.new.levels = TRUE)
# Crear ranking GLMM
ranking_glmm_2025 <- datos_2025_glmm %>%
group_by(country) %>%
summarise(score_2025_glmm = mean(happiness_pred_2025_glmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_glmm)) %>%
mutate(rank_glmm = row_number())
ranking_2024 <- df_unificado %>%
filter(year == 2024) %>%
group_by(country) %>%
summarise(score_2024 = mean(happiness_score, na.rm = TRUE)) %>%
arrange(desc(score_2024)) %>%
mutate(rank_2024 = row_number())
library(knitr)
# Unir todos los rankings por país
comparativa_total <- ranking_lmm_2025 %>%
left_join(ranking_glmm_2025, by = "country") %>%
left_join(ranking_2024, by = "country")
# Top 10, España, Bottom 10 (según LMM)
top_10 <- comparativa_total %>% slice_min(rank_lmm, n = 10) %>% mutate(section = "Top 10")
espana <- comparativa_total %>% filter(country == "Spain") %>% mutate(section = "España")
bottom_10 <- comparativa_total %>% slice_max(rank_lmm, n = 10) %>% mutate(section = "Últimos 10")
# Unir todo y mostrar
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank_lmm)
kable(tabla_final,
caption = "Comparación del ranking de felicidad en 2025 (LMM y GLMM) y 2024",
col.names = c("País", "Score 2025 (LMM)", "Ranking 2025 (LMM)",
"Score 2025 (GLMM)", "Ranking 2025 (GLMM)",
"Score 2024", "Ranking 2024", "Sección"))
citation("shiny")
library(performance)
r2(glmm_valido)
# Cargar librerías necesarias
library(glmmTMB)
library(MuMIn)
library(DHARMa)
library(tidyverse)
# Modelo GLMM válido
glmm_valido <- glmmTMB(
happiness_score ~ support + life_exp + (1 + regional_indicator | country),
data = df_unificado,
family = Gamma(link = "log"),
na.action = na.fail
)
summary(glmm_valido)
library(performance)
r2(glmm_valido)
# Cargar librerías necesarias
library(lme4)
library(MuMIn)
library(DHARMa)
# Ajustar el modelo base para selección (con df_unificado y na.fail)
modelo_base <- lmer(
happiness_score ~ regional_indicator + gdp + support + life_exp + freedom +
generosity + corruption + status + political_rights + civil_liberties +
fair_election + regime_category + democracy + electoral_category +
presidential + alternation + year +
(1 + year | country),
data = df_unificado,
REML = FALSE,
na.action = na.fail
)
# Aplicar selección por AIC
# modelos_dredge <- dredge(modelo_base, trace = FALSE)
# modelo_seleccionado <- get.models(modelos_dredge, 1)[[1]]
modelo_seleccionado <- modelo_base <- lmer(
happiness_score ~ civil_liberties + electoral_category + freedom +
gdp + life_exp + political_rights + regime_category + regional_indicator +
status + support + year + (1 + year | country),
data = df_unificado,
REML = FALSE,
na.action = na.fail
)
library(performance)
# Calcular R²
r2_vals <- r2(modelo_seleccionado)
# Extraer el R² marginal
r2_marginal <- r2_vals$R2_marginal
# Extraer el R² condicional
r2_conditional <- r2_vals$R2_conditional
# MEJOR LMM
r2_marginal
r2_conditional
# MODELO LMM
r2_marginal
r2_conditional
library(performance)
r2(glmm_valido)
shiny::runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
runApp('App')
?glmmTMB
??glmmTMB
glmmTMB::glmmTMB(family=?)
?glmmTMB::family.glmmTMB
??glmmTMB::family.glmmTMB
outliers::grubbs.test(df_original$happiness_score)
outliers::grubbs.test(df_original$gdp_per_capita)
outliers::grubbs.test(df_original$happiness_score)
outliers::grubbs.test(df_original$gdp)
outliers::grubbs.test(df_original$support)
outliers::grubbs.test(df_original$life_exp)
outliers::grubbs.test(df_original$freedom)
outliers::grubbs.test(df_original$generosity)
outliers::grubbs.test(df_original$corruption)
outliers::grubbs.test(df_original$happiness_score)$p.value
shapiro.test(df_original$happiness_score)
#| label: fig-mapa-mundi
#| echo: false
#| warning: false
#| fig-cap: "Representación de la puntuación global de felicidad en 2024."
library(plotly)
library(dplyr)
library(readr)
df_base <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv')
df_felicidad <- df_sin_democracia_sin_na
df_mapa1 <- df_base %>%
left_join(filter(df_felicidad, year == 2024), by = c("COUNTRY" = "country")) %>%
filter(!is.na(happiness_score))
l <- list(color = toRGB("grey"), width = 0.5)
g <- list(showframe = FALSE, showcoastlines = FALSE, projection = list(type = 'Mercator'))
fig1 <- plot_geo(df_mapa1) %>%
add_trace(
z = ~happiness_score, color = ~happiness_score, colorscale = "Viridis",
text = ~COUNTRY, locations = ~CODE, marker = list(line = l)
) %>%
colorbar(title = "Happiness Score") %>%
layout(title = 'Países con datos de felicidad (2024)', geo = g)
if (knitr::is_latex_output()) {
html_file <- "mapa_interactivo.html"
png_file <- "mapa_interactivo.png"
saveWidget(fig1, file = html_file, selfcontained = TRUE)
webshot2::webshot(html_file, file = png_file, vwidth = 2000, vheight = 1200)
knitr::include_graphics("mapa_interactivo.png")
} else {
fig1
}
View(df_completo)
View(df_original)
View(df_original)
#| label: fig-felicidad-region
#| echo: false
#| warning: false
#| fig-cap: "Distribución de la felicidad agrupada por región en los años 2015, 2020 y 2024."
orden_regiones <- c(
"Western Europe", "Central and Eastern Europe", "Commonwealth of Independent States",
"Middle East and North Africa", "Sub-Saharan Africa", "South Asia",
"Southeast Asia", "East Asia", "Latin America and Caribbean", "North America and ANZ"
)
df_violin <- df_sin_democracia_sin_na %>%
filter(year %in% c(2015, 2020, 2024)) %>%
mutate(regional_indicator = factor(regional_indicator, levels = orden_regiones))
p <- ggplot(df_violin, aes(x = regional_indicator, y = happiness_score, fill = regional_indicator)) +
geom_violin(alpha = 0.6, trim = FALSE) +
stat_summary(fun = median, geom = "point", color = "black", shape = 18, size = 2) +
theme_minimal() +
facet_wrap(~ year, ncol = 1) +
labs(
title = "Distribución de Felicidad por Región (2015, 2020, 2024)",
x = "Región", y = "Happiness Score"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
if (knitr::is_latex_output()) {
ggsave("violines_felicidad_por_anio.png", p, width = 10, height = 12)
knitr::include_graphics("violines_felicidad_por_anio.png")
} else {
ggplotly(p)
}
ggplot(df_violin, aes(x = regional_indicator, y = happiness_score, fill = regional_indicator)) +
geom_violin(alpha = 0.6, trim = FALSE) +
stat_summary(fun = median, geom = "point", color = "black", shape = 18, size = 2) +
theme_minimal() +
facet_wrap(~ year, ncol = 1) +
labs(
title = "Distribución de Felicidad por Región (2015, 2020, 2024)",
x = "Región", y = "Happiness Score"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
#| label: fig-felicidad-region
#| echo: false
#| warning: false
#| fig-cap: "Distribución de la felicidad agrupada por región en los años 2015, 2020 y 2024."
orden_regiones <- c(
"Western Europe", "Central and Eastern Europe", "Commonwealth of Independent States",
"Middle East and North Africa", "Sub-Saharan Africa", "South Asia",
"Southeast Asia", "East Asia", "Latin America and Caribbean", "North America and ANZ"
)
df_violin <- df_sin_democracia_sin_na %>%
filter(year %in% c(2015, 2020, 2024)) %>%
mutate(regional_indicator = factor(regional_indicator, levels = orden_regiones))
p <- ggplot(df_violin, aes(x = regional_indicator, y = happiness_score, fill = regional_indicator)) +
geom_violin(alpha = 0.6, trim = FALSE) +
stat_summary(fun = median, geom = "point", color = "black", shape = 18, size = 2) +
theme_minimal() +
facet_wrap(~ year, ncol = 1) +
labs(
title = "Distribución de Felicidad por Región (2015, 2020, 2024)",
x = "Región", y = "Happiness Score"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
if (knitr::is_latex_output()) {
ggsave("violines_felicidad_por_anio.png", p, width = 10, height = 12)
knitr::include_graphics("violines_felicidad_por_anio.png")
} else {
ggplotly(p)
}
#| label: fig-percepcion-corrupcion
#| echo: false
#| warning: false
#| fig-cap: "Distribución de la percepción de corrupción agrupada por región en los años 2015, 2020 y 2024."
orden_regiones <- c(
"Western Europe", "Central and Eastern Europe", "Commonwealth of Independent States",
"Middle East and North Africa", "Sub-Saharan Africa", "South Asia",
"Southeast Asia", "East Asia", "Latin America and Caribbean", "North America and ANZ"
)
df_corrupcion <- df_sin_democracia_sin_na %>%
filter(year %in% c(2015, 2020, 2024)) %>%
mutate(regional_indicator = factor(regional_indicator, levels = orden_regiones))
p <- ggplot(df_corrupcion, aes(x = regional_indicator, y = corruption, fill = regional_indicator)) +
geom_violin(alpha = 0.6, trim = FALSE) +
stat_summary(fun = median, geom = "point", color = "black", shape = 18, size = 2) +
theme_minimal() +
facet_wrap(~ year, ncol = 1) +
labs(
title = "Distribución de la Percepción de Corrupción por Región (2015, 2020, 2024)",
x = "Región", y = "Percepción de Corrupción"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position = "none")
if (knitr::is_latex_output()) {
ggsave("violines_corrupcion_por_anio.png", p, width = 10, height = 12)
knitr::include_graphics("violines_corrupcion_por_anio.png")
} else {
ggplotly(p)
}
#| label: fig-variables-comparacion
#| echo: false
#| warning: false
#| fig-cap: "Análisis temporal de las principales variables del informe de felicidad en comparación con Hungría, Turquía y Venezuela."
#| fig-height: 8
library(dplyr)
library(tidyr)
library(ggplot2)
# Variables numéricas de interés
vars_interes <- c("gdp", "support",
"life_exp", "freedom",
"generosity", "corruption", "happiness_score")
# Media global
media_global <- df_sin_democracia_sin_na %>%
group_by(year) %>%
summarise(across(all_of(vars_interes), mean, na.rm = TRUE)) %>%
mutate(country = "Media Global") %>%
pivot_longer(cols = -c(year, country), names_to = "variable", values_to = "media")
# Datos de los países a comparar
paises <- c("Venezuela", "Turkey", "Hungary")
paises_data <- df_sin_democracia_sin_na %>%
filter(country %in% paises) %>%
select(year, country, all_of(vars_interes)) %>%
pivot_longer(cols = -c(year, country), names_to = "variable", values_to = "media")
# Combinar todo
data_comparada <- bind_rows(media_global, paises_data)
# Gráfico
ggplot(data_comparada, aes(x = year, y = media, color = country)) +
geom_line(size = 1) +
geom_point(size = 2) +
facet_wrap(~variable, scales = "free_y") +
scale_color_manual(
values = c(
"Media Global" = "gray70",
"Venezuela" = "firebrick",
"Turkey" = "royalblue",
"Hungary" = "darkgreen"
)
) +
scale_x_continuous(breaks = sort(unique(data_comparada$year))) +
theme_minimal() +
labs(
title = "Comparación: Media Global vs Venezuela, Turquía y Hungría (2015–2024)",
x = "Año", y = "Valor medio", color = "País"
) +
theme(strip.text = element_text(face = "bold"))
#| label: fig-felicidad-pais
#| echo: false
#| warning: false
#| fig-cap: "Análisis temporal de la evolución temporal de la felicidad por país."
#| fig-width: 5
#| fig-height: 3.5
library(dplyr)
library(ggplot2)
library(viridis)
# 1. Calcular la media global por país (en todo el periodo)
orden_paises <- df_sin_democracia_sin_na %>%
group_by(country) %>%
summarise(media_pais = mean(happiness_score, na.rm = TRUE)) %>%
arrange(desc(media_pais)) %>%
pull(country)
# 2. Calcular media global por año
media_anual <- df_sin_democracia_sin_na %>%
group_by(year) %>%
summarise(media_happiness = mean(happiness_score, na.rm = TRUE))
# 3. Preparar dataset con orden fijo
df_plot <- df_sin_democracia_sin_na %>%
filter(!is.na(happiness_score)) %>%
left_join(media_anual, by = "year") %>%
mutate(country = factor(country, levels = orden_paises))
# 4. Gráfico con orden constante y media global por año
ggplot(df_plot, aes(x = country, y = happiness_score, fill = happiness_score)) +
geom_col(show.legend = FALSE) +
geom_hline(aes(yintercept = media_happiness), color = "red", linetype = "dashed", linewidth = 0.8) +
facet_wrap(~ year, scales = "free_x") +
scale_fill_viridis_c() +
labs(
title = "Happiness Score por País (ordenado por media global)",
subtitle = "Línea roja discontinua = media global del año",
x = "País", y = "Happiness Score"
) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text = element_text(face = "bold")
)
#| label: fig-felicidad-espana
#| echo: false
#| warning: false
#| fig-cap: "Evolución temporal de la felicidad en España."
#| fig-width: 6
#| fig-height: 2.5
# Lista de países europeos cercanos a España
paises_cercanos <- c("Spain", "Portugal", "France", "Italy", "Andorra", "Switzerland", "Germany", "United Kingdom")
# Datos de estos países
df_cercanos <- df_sin_democracia_sin_na %>%
filter(country %in% paises_cercanos)
# Evolución del Happiness Score en España
df_espana <- df_cercanos %>% filter(country == "Spain")
ggplot(df_espana, aes(x = year, y = happiness_score)) +
geom_line(color = "blue") +
geom_point(color = "blue") +
labs(title = "Evolución del Happiness Score en España", x = "Año", y = "Happiness Score") +
scale_x_continuous(breaks = unique(df_espana$year)) +
theme_minimal()
#| label: fig-felicidad-espana-paises
#| echo: false
#| warning: false
#| fig-cap: "Evolución temporal de la felicidad en España y en países cercanos."
#| fig-width: 6
#| fig-height: 2.5
# Evolución del Happiness Score en países cercanos
ggplot(df_cercanos, aes(x = year, y = happiness_score, color = country, group = country)) +
geom_line(linewidth = 1) +
labs(title = "Evolución en Países Cercanos a España",
x = "Año", y = "Happiness Score") +
scale_x_continuous(breaks = unique(df_espana$year)) +
theme_minimal()
#| label: fig-variables-espana
#| echo: false
#| warning: false
#| fig-cap: "Evolución del PIB en España y sus países cercanos."
#| fig-width: 6
#| fig-height: 2
# Evolución del PIB (GDP per capita)
ggplot(df_cercanos, aes(x = year, y = gdp, color = country, group = country)) +
geom_line(linewidth = 1) +
labs(title = "Evolución en Países Cercanos a España",
x = "Año", y = "PIB per cápita") +
scale_x_continuous(breaks = unique(df_espana$year)) +
theme_minimal() +
theme(
legend.text = element_text(size = 7),
legend.title = element_text(size = 8)
)
#| label: fig-variables-espana2
#| echo: false
#| warning: false
#| fig-cap: "Evolución del apoyo social en España y sus países cercanos."
#| fig-width: 6
#| fig-height: 2
# Evolución del apoyo social
ggplot(df_cercanos, aes(x = year, y = support, color = country, group = country)) +
geom_line(linewidth = 1) +
labs(title = "Evolución en Países Cercanos a España",
x = "Año", y = "Apoyo Social") +
scale_x_continuous(breaks = unique(df_espana$year)) +
theme_minimal() +
theme(
legend.text = element_text(size = 7),
legend.title = element_text(size = 8)
)
#| label: fig-variables-espana3
#| echo: false
#| warning: false
#| fig-cap: "Evolución de la libertad en la toma de decisiones en España y sus países cercanos."
#| fig-width: 6
#| fig-height: 2
# Evolución de la libertad en la toma de decisiones
ggplot(df_cercanos, aes(x = year, y = freedom, color = country, group = country)) +
geom_line(linewidth = 1) +
labs(title = "Evolución en Países Cercanos a España",
x = "Año", y = "Libertad") +
scale_x_continuous(breaks = unique(df_espana$year)) +
theme_minimal() +
theme(
legend.text = element_text(size = 7),
legend.title = element_text(size = 8)
)
#| label: fig-variables-espana
#| echo: false
#| warning: false
#| fig-cap: "Evolución del PIB en España y sus países cercanos."
#| fig-width: 6
#| fig-height: 2
# Evolución del PIB (GDP per capita)
ggplot(df_cercanos, aes(x = year, y = gdp, color = country, group = country)) +
geom_line(linewidth = 1) +
labs(title = "Evolución en Países Cercanos a España",
x = "Año", y = "PIB per cápita") +
scale_x_continuous(breaks = unique(df_espana$year)) +
theme_minimal() +
theme(
legend.text = element_text(size = 7),
legend.title = element_text(size = 8)
)
#| label: fig-variables-espana2
#| echo: false
#| warning: false
#| fig-cap: "Evolución del apoyo social en España y sus países cercanos."
#| fig-width: 6
#| fig-height: 2
# Evolución del apoyo social
ggplot(df_cercanos, aes(x = year, y = support, color = country, group = country)) +
geom_line(linewidth = 1) +
labs(title = "Evolución en Países Cercanos a España",
x = "Año", y = "Apoyo Social") +
scale_x_continuous(breaks = unique(df_espana$year)) +
theme_minimal() +
theme(
legend.text = element_text(size = 7),
legend.title = element_text(size = 8)
)
#| label: fig-variables-espana
#| echo: false
#| warning: false
#| fig-cap: "Evolución del PIB en España y sus países cercanos."
#| fig-width: 6
#| fig-height: 2
# Evolución del PIB (GDP per capita)
ggplot(df_cercanos, aes(x = year, y = gdp, color = country, group = country)) +
geom_line(linewidth = 1) +
labs(title = "Evolución en Países Cercanos a España",
x = "Año", y = "PIB per cápita") +
scale_x_continuous(breaks = unique(df_espana$year)) +
theme_minimal() +
theme(
legend.text = element_text(size = 7),
legend.title = element_text(size = 8)
)
#| label: fig-variables-espana2
#| echo: false
#| warning: false
#| fig-cap: "Evolución del apoyo social en España y sus países cercanos."
#| fig-width: 6
#| fig-height: 2
# Evolución del apoyo social
ggplot(df_cercanos, aes(x = year, y = support, color = country, group = country)) +
geom_line(linewidth = 1) +
labs(title = "Evolución en Países Cercanos a España",
x = "Año", y = "Apoyo Social") +
scale_x_continuous(breaks = unique(df_espana$year)) +
theme_minimal() +
theme(
legend.text = element_text(size = 7),
legend.title = element_text(size = 8)
)
#| label: fig-variables-espana3
#| echo: false
#| warning: false
#| fig-cap: "Evolución de la libertad en la toma de decisiones en España y sus países cercanos."
#| fig-width: 6
#| fig-height: 2
# Evolución de la libertad en la toma de decisiones
ggplot(df_cercanos, aes(x = year, y = freedom, color = country, group = country)) +
geom_line(linewidth = 1) +
labs(title = "Evolución en Países Cercanos a España",
x = "Año", y = "Libertad") +
scale_x_continuous(breaks = unique(df_espana$year)) +
theme_minimal() +
theme(
legend.text = element_text(size = 7),
legend.title = element_text(size = 8)
)

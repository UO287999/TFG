#| echo: false
#| warning: false
#| fig-cap: "Evolución de la media anual de las variables felicidad, generosidad y percepción de corrupción (2015-2024)."
#| fig-width: 5
#| fig-height: 3.5
library(ggplot2)
library(dplyr)
library(patchwork)
df_sin_democracia_sin_na <- read.csv("df_sin_democracia_sin_na.csv")
df_sin_democracia_sin_na <- read.csv("df_sin_democracia_sin_na.csv")
# Dataset filtrado
df_temp <- df_sin_democracia_sin_na %>%
filter(year %in% 2015:2024) %>%
group_by(year) %>%
summarise(
felicidad = mean(happiness_score, na.rm = TRUE),
generosidad = mean(generosity, na.rm = TRUE),
corrupcion = mean(corruption, na.rm = TRUE)
)
# Gráfico 1: Felicidad
g1 <- ggplot(df_temp, aes(x = factor(year), y = felicidad)) +
geom_line(color = "#1b9e77", size = 1.2) +
geom_point(color = "#1b9e77", size = 2) +
labs(y = "Felicidad", x = NULL) +
theme_minimal()
# Gráfico 2: Generosidad
g2 <- ggplot(df_temp, aes(x = factor(year), y = generosidad)) +
geom_line(color = "#d95f02", size = 1.2) +
geom_point(color = "#d95f02", size = 2) +
labs(y = "Generosidad", x = NULL) +
theme_minimal()
# Gráfico 3: Corrupción
g3 <- ggplot(df_temp, aes(x = factor(year), y = corrupcion)) +
geom_line(color = "#7570b3", size = 1.2) +
geom_point(color = "#7570b3", size = 2) +
labs(y = "Corrupción", x = "Año") +
theme_minimal()
(g1 / g2 / g3) +
plot_annotation(title = "Evolución temporal de variables clave (2015-2024)")
#| label: fig-matriz
#| echo: false
#| warning: false
#| fig-cap: "Matriz de correlaciones de las variables numéricas de nuestra base de datos."
#| fig-width: 5
#| fig-height: 3.5
# Cargar librerías
library(corrplot)
library(GGally)
library(dplyr)
# Seleccionamos las variables de interés para el modelo
df_modelo <- df_sin_democracia_sin_na %>%
select(happiness_score, gdp, life_exp, support, freedom, generosity, corruption)
# Calculamos la matriz de correlaciones de Pearson
cor_matrix <- cor(df_modelo, use = "complete.obs", method = "pearson")
# Visualizamos la matriz de correlaciones
corrplot(cor_matrix, method = "color", type = "upper",
addCoef.col = "black", number.cex = 0.7, tl.cex = 0.8, tl.col = "black",
col = colorRampPalette(c("red", "white", "blue"))(200))
# Modelo con todas las explicativas como predictores
modelo_vif_total <- lm(happiness_score ~ gdp + life_exp + support + freedom + generosity + corruption,
data = df_sin_democracia_sin_na)
# Calcular VIF de cada predictor
vif(modelo_vif_total)
library(car)
# Modelo con todas las explicativas como predictores
modelo_vif_total <- lm(happiness_score ~ gdp + life_exp + support + freedom + generosity + corruption,
data = df_sin_democracia_sin_na)
# Calcular VIF de cada predictor
vif(modelo_vif_total)
vif(modelo_vif_total)$gdp
# Calcular VIF de cada predictor
vif(modelo_vif_total)
# Cargar librería necesaria
library(car)
# Modelo con todas las explicativas como predictores
modelo_vif_total <- lm(happiness_score ~ gdp + life_exp + support + freedom + corruption,
data = df_sin_democracia_sin_na)
# Calcular VIF de cada predictor
vif(modelo_vif_total)
# Calcular VIF de cada predictor
vif <- vif(modelo_vif_total)
gdp <- vif["gdp"]
life_exp <- vif["life_exp"]
support <- vif["support"]
freedom <- vif["freedom"]
corruption <- vif["corruption"]
#| label: fig-modelo-clasico
#| echo: false
#| warning: false
#| fig-cap: "Gráficas para la validación del modelo clásico."
#| fig-width: 5
#| fig-height: 3.5
modelo_final <- lm(happiness_score ~ support + life_exp + freedom + gdp + corruption,
data = df_sin_democracia_sin_na)
autoplot(modelo_final, which = 1:4)
#| label: fig-modelo-clasico
#| echo: false
#| warning: false
#| fig-cap: "Gráficas para la validación del modelo clásico."
#| fig-width: 5
#| fig-height: 3.5
modelo_final <- lm(happiness_score ~ support + life_exp + freedom + gdp + corruption,
data = df_sin_democracia_sin_na)
autoplot(modelo_final, which = 1:4)
jarque.bera.test(modelo_final$residuals)
library(readr)
library(readxl)
library(janitor)
library(mice)
library(visdat)
library(outliers)
library(plotly)
library(tidyverse)
library(webshot2)
library(lmtest)
library(tseries)
library(ggfortify)
jarque.bera.test(modelo_final$residuals)
jarque.bera.test(modelo_final$residuals)
jarque <- jarque.bera.test(modelo_final$residuals)$p.value
jarque
mean(modelo_final$residuals)
bptest(modelo_final, studentize = FALSE)
jarque.bera.test(modelo_final$residuals)
jarque <- jarque.bera.test(modelo_final$residuals)$p.value
dwtest(modelo_final)
#| label: fig-modelo-clasico
#| echo: false
#| warning: false
#| fig-cap: "Gráficas para la validación del modelo clásico."
#| fig-width: 5
#| fig-height: 3.5
modelo_final <- lm(happiness_score ~ support + life_exp + freedom + gdp + corruption,
data = df_sin_democracia_sin_na)
autoplot(modelo_final, which = 1:4)
jarque.bera.test(modelo_final$residuals)
jarque <- jarque.bera.test(modelo_final$residuals)$p.value
mean(modelo_final$residuals)
bptest(modelo_final, studentize = FALSE)
dwtest(modelo_final)
library(lme4)
formula(modelo_seleccionado)
summary(modelo_seleccionado)$coefficients
# fixef(modelo_seleccionado)      # Efectos fijos
# ranef(modelo_seleccionado)      # Efectos aleatorios
# VarCorr(modelo_seleccionado)
library(performance)
# Calcular R²
r2_vals <- r2(modelo_seleccionado)
# Extraer el R² marginal
r2_marginal <- r2_vals$R2_marginal
# Extraer el R² condicional
r2_conditional <- r2_vals$R2_conditional
#| label: fig-qqplot-residuos2
#| echo: false
#| warning: false
#| fig-cap: "QQ-plot de los residuos simulados del modelo mixto."
#| fig-width: 5
#| fig-height: 3.5
sim_res <- DHARMa::simulateResiduals(fittedModel = modelo_seleccionado)
plotQQunif(sim_res)
#| label: fig-dispersion-residuos2
#| echo: false
#| warning: false
#| fig-cap: "Dispersión de los residuos simulados frente a los valores predichos."
#| fig-width: 5
#| fig-height: 3.5
plotResiduals(sim_res)
library(readr)
library(readxl)
library(janitor)
library(mice)
library(visdat)
library(outliers)
library(plotly)
library(tidyverse)
library(webshot2)
library(lmtest)
library(tseries)
library(ggfortify)
#| label: fig-qqplot-residuos2
#| echo: false
#| warning: false
#| fig-cap: "QQ-plot de los residuos simulados del modelo mixto."
#| fig-width: 5
#| fig-height: 3.5
sim_res <- DHARMa::simulateResiduals(fittedModel = modelo_seleccionado)
plotQQunif(sim_res)
library(MuMIn)
#| label: fig-qqplot-residuos2
#| echo: false
#| warning: false
#| fig-cap: "QQ-plot de los residuos simulados del modelo mixto."
#| fig-width: 5
#| fig-height: 3.5
sim_res <- DHARMa::simulateResiduals(fittedModel = modelo_seleccionado)
plotQQunif(sim_res)
#| label: fig-dispersion-residuos2
#| echo: false
#| warning: false
#| fig-cap: "Dispersión de los residuos simulados frente a los valores predichos."
#| fig-width: 5
#| fig-height: 3.5
plotResiduals(sim_res)
# Cargar librerías necesarias
library(glmmTMB)
library(MuMIn)
library(DHARMa)
library(tidyverse)
# Modelo GLMM válido
glmm_valido <- glmmTMB(
happiness_score ~ support + life_exp + (1 + regional_indicator | country),
data = df_unificado,
family = Gamma(link = "log"),
na.action = na.fail
)
summary(glmm_valido)
View(df_unificado)
library(performance)
r2(glmm_valido)
#| label: fig-qqplot-residuos3
#| echo: false
#| warning: false
#| fig-cap: "QQ-plot de los residuos simulados del modelo mixto."
#| fig-width: 5
#| fig-height: 3.5
sim_res <- DHARMa::simulateResiduals(fittedModel = glmm_valido)
plotQQunif(sim_res)
#| label: fig-dispersion-residuos3
#| echo: false
#| warning: false
#| fig-cap: "Dispersión de los residuos simulados frente a los valores predichos."
#| fig-width: 5
#| fig-height: 3.5
plotResiduals(sim_res)
library(dplyr)
library(knitr)
# Crear copia para predicciones LMM
datos_2025_lmm <- df_unificado
datos_2025_lmm$year <- 2025
# Predecir con el modelo LMM
datos_2025_lmm$happiness_pred_2025_lmm <- predict(modelo_seleccionado, newdata = datos_2025_lmm, allow.new.levels = TRUE)
# Crear ranking LMM
ranking_lmm_2025 <- datos_2025_lmm %>%
group_by(country) %>%
summarise(score_2025_lmm = mean(happiness_pred_2025_lmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_lmm)) %>%
mutate(rank_lmm = row_number())
# Crear copia para predicciones GLMM
datos_2025_glmm <- df_unificado
datos_2025_glmm$year <- 2025
# Predecir con el modelo GLMM
datos_2025_glmm$happiness_pred_2025_glmm <- predict(glmm_valido, newdata = datos_2025_glmm, type = "response", allow.new.levels = TRUE)
# Crear ranking GLMM
ranking_glmm_2025 <- datos_2025_glmm %>%
group_by(country) %>%
summarise(score_2025_glmm = mean(happiness_pred_2025_glmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_glmm)) %>%
mutate(rank_glmm = row_number())
ranking_2024 <- df_unificado %>%
filter(year == 2024) %>%
group_by(country) %>%
summarise(score_2024 = mean(happiness_score, na.rm = TRUE)) %>%
arrange(desc(score_2024)) %>%
mutate(rank_2024 = row_number())
library(knitr)
# Unir todos los rankings por país
comparativa_total <- ranking_lmm_2025 %>%
left_join(ranking_glmm_2025, by = "country") %>%
left_join(ranking_2024, by = "country")
# Top 10, España, Bottom 10 (según LMM)
top_10 <- comparativa_total %>% slice_min(rank_glmm, n = 10) %>% mutate(section = "Top 10")
espana <- comparativa_total %>% filter(country == "Spain") %>% mutate(section = "España")
bottom_10 <- comparativa_total %>% slice_max(rank_glmm, n = 10) %>% mutate(section = "Últimos 10")
# Unir todo y mostrar
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank_lmm)
kable(tabla_final,
caption = "Comparación del ranking de felicidad en 2025 (LMM y GLMM) y 2024",
col.names = c("País", "Score 2025 (LMM)", "Ranking 2025 (LMM)",
"Score 2025 (GLMM)", "Ranking 2025 (GLMM)",
"Score 2024", "Ranking 2024", "Sección"))
#| label: tbl-ranking-2025
#| echo: false
#| warning: false
#| message: false
#| tbl-cap: "Comparación del ranking de felicidad en 2025 (LMM y GLMM) y 2024"
#| tbl-columns: 8
kable(tabla_final,
col.names = c("País", "Score 2025 (LMM)", "Ranking 2025 (LMM)",
"Score 2025 (GLMM)", "Ranking 2025 (GLMM)",
"Score 2024", "Ranking 2024", "Sección"))
library(dplyr)
library(knitr)
# Crear copia para predicciones LMM
datos_2025_lmm <- df_unificado
datos_2025_lmm$year <- 2025
# Predecir con el modelo LMM
datos_2025_lmm$happiness_pred_2025_lmm <- predict(modelo_seleccionado, newdata = datos_2025_lmm, allow.new.levels = TRUE)
# Crear ranking LMM
ranking_lmm_2025 <- datos_2025_lmm %>%
group_by(country) %>%
summarise(score_2025_lmm = mean(happiness_pred_2025_lmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_lmm)) %>%
mutate(rank_lmm = row_number())
# Crear copia para predicciones GLMM
datos_2025_glmm <- df_unificado
datos_2025_glmm$year <- 2025
# Predecir con el modelo GLMM
datos_2025_glmm$happiness_pred_2025_glmm <- predict(glmm_valido, newdata = datos_2025_glmm, type = "response", allow.new.levels = TRUE)
# Crear ranking GLMM
ranking_glmm_2025 <- datos_2025_glmm %>%
group_by(country) %>%
summarise(score_2025_glmm = mean(happiness_pred_2025_glmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_glmm)) %>%
mutate(rank_glmm = row_number())
ranking_2024 <- df_unificado %>%
filter(year == 2024) %>%
group_by(country) %>%
summarise(score_2024 = mean(happiness_score, na.rm = TRUE)) %>%
arrange(desc(score_2024)) %>%
mutate(rank_2024 = row_number())
library(knitr)
# Unir todos los rankings por país
comparativa_total <- ranking_lmm_2025 %>%
left_join(ranking_glmm_2025, by = "country") %>%
left_join(ranking_2024, by = "country")
# Top 10, España, Bottom 10 (según LMM)
top_10 <- comparativa_total %>% slice_min(rank_glmm, n = 10) %>% mutate(section = "Top 10")
espana <- comparativa_total %>% filter(country == "Spain") %>% mutate(section = "España")
bottom_10 <- comparativa_total %>% slice_max(rank_glmm, n = 10) %>% mutate(section = "Últimos 10")
# Unir todo y mostrar
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank_glmm)
kable(tabla_final,
caption = "Comparación del ranking de felicidad en 2025 (LMM y GLMM) y 2024",
col.names = c("País", "Score 2025 (LMM)", "Ranking 2025 (LMM)",
"Score 2025 (GLMM)", "Ranking 2025 (GLMM)",
"Score 2024", "Ranking 2024", "Sección"))
library(dplyr)
library(knitr)
# Crear copia para predicciones LMM
datos_2025_lmm <- df_unificado
datos_2025_lmm$year <- 2025
# Predecir con el modelo LMM
datos_2025_lmm$happiness_pred_2025_lmm <- predict(modelo_seleccionado, newdata = datos_2025_lmm, allow.new.levels = TRUE)
# Crear ranking LMM
ranking_lmm_2025 <- datos_2025_lmm %>%
group_by(country) %>%
summarise(score_2025_lmm = mean(happiness_pred_2025_lmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_lmm)) %>%
mutate(rank_lmm = row_number())
# Crear copia para predicciones GLMM
datos_2025_glmm <- df_unificado
datos_2025_glmm$year <- 2025
# Predecir con el modelo GLMM
datos_2025_glmm$happiness_pred_2025_glmm <- predict(glmm_valido, newdata = datos_2025_glmm, type = "response", allow.new.levels = TRUE)
# Crear ranking GLMM
ranking_glmm_2025 <- datos_2025_glmm %>%
group_by(country) %>%
summarise(score_2025_glmm = mean(happiness_pred_2025_glmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_glmm)) %>%
mutate(rank_glmm = row_number())
ranking_2024 <- df_unificado %>%
filter(year == 2024) %>%
group_by(country) %>%
summarise(score_2024 = mean(happiness_score, na.rm = TRUE)) %>%
arrange(desc(score_2024)) %>%
mutate(rank_2024 = row_number())
library(knitr)
# Unir todos los rankings por país
comparativa_total <- ranking_lmm_2025 %>%
left_join(ranking_glmm_2025, by = "country") %>%
left_join(ranking_2024, by = "country")
# Top 10, España, Bottom 10 (según LMM)
top_10 <- comparativa_total %>% slice_min(rank_glmm, n = 10) %>% mutate(section = "Top 10")
espana <- comparativa_total %>% filter(country == "Spain") %>% mutate(section = "España")
bottom_10 <- comparativa_total %>% slice_max(rank_glmm, n = 10) %>% mutate(section = "Últimos 10")
# Unir todo y mostrar
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank_glmm)
kable(tabla_final,
caption = "Comparación del ranking de felicidad en 2025 (LMM y GLMM) y 2024",
col.names = c("País", "Score 2025 (GLMM)", "Ranking 2025 (GLMM)",
"Score 2025 (LMM)", "Ranking 2025 (LMM)",
"Score 2024", "Ranking 2024", "Sección"))
library(dplyr)
library(knitr)
# Crear copia para predicciones LMM
datos_2025_lmm <- df_unificado
datos_2025_lmm$year <- 2025
# Predecir con el modelo LMM
datos_2025_lmm$happiness_pred_2025_lmm <- predict(modelo_seleccionado, newdata = datos_2025_lmm, allow.new.levels = TRUE)
# Crear ranking LMM
ranking_lmm_2025 <- datos_2025_lmm %>%
group_by(country) %>%
summarise(score_2025_lmm = mean(happiness_pred_2025_lmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_lmm)) %>%
mutate(rank_lmm = row_number())
# Crear copia para predicciones GLMM
datos_2025_glmm <- df_unificado
datos_2025_glmm$year <- 2025
# Predecir con el modelo GLMM
datos_2025_glmm$happiness_pred_2025_glmm <- predict(glmm_valido, newdata = datos_2025_glmm, type = "response", allow.new.levels = TRUE)
# Crear ranking GLMM
ranking_glmm_2025 <- datos_2025_glmm %>%
group_by(country) %>%
summarise(score_2025_glmm = mean(happiness_pred_2025_glmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_glmm)) %>%
mutate(rank_glmm = row_number())
ranking_2024 <- df_unificado %>%
filter(year == 2024) %>%
group_by(country) %>%
summarise(score_2024 = mean(happiness_score, na.rm = TRUE)) %>%
arrange(desc(score_2024)) %>%
mutate(rank_2024 = row_number())
library(knitr)
# Unir todos los rankings por país
comparativa_total <- ranking_lmm_2025 %>%
left_join(ranking_glmm_2025, by = "country") %>%
left_join(ranking_2024, by = "country")
# Top 10, España, Bottom 10 (según LMM)
top_10 <- comparativa_total %>% slice_min(rank_glmm, n = 10) %>% mutate(section = "Top 10")
espana <- comparativa_total %>% filter(country == "Spain") %>% mutate(section = "España")
bottom_10 <- comparativa_total %>% slice_max(rank_glmm, n = 10) %>% mutate(section = "Últimos 10")
# Unir todo y mostrar
tabla_final <- tabla_final %>%
select(country,
score_2025_glmm, rank_glmm,
score_2025_lmm, rank_lmm,
score_2024, rank_2024,
section) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank_glmm)
kable(tabla_final,
caption = "Comparación del ranking de felicidad en 2025 (LMM y GLMM) y 2024",
col.names = c("País", "Score 2025 (GLMM)", "Ranking 2025 (GLMM)",
"Score 2025 (LMM)", "Ranking 2025 (LMM)",
"Score 2024", "Ranking 2024", "Sección"))
#| label: tbl-ranking-2025
#| echo: false
#| warning: false
#| message: false
#| tbl-cap: "Comparación del ranking de felicidad en 2025 (LMM y GLMM) y 2024"
#| tbl-columns: 8
kable(tabla_final,
col.names = c("País", "Score 2025 (GLMM)", "Ranking 2025 (GLMM)",
"Score 2025 (LMM)", "Ranking 2025 (LMM)",
"Score 2024", "Ranking 2024", "Sección"))
library(dplyr)
library(knitr)
# Crear copia para predicciones LMM
datos_2025_lmm <- df_unificado
datos_2025_lmm$year <- 2025
# Predecir con el modelo LMM
datos_2025_lmm$happiness_pred_2025_lmm <- predict(modelo_seleccionado, newdata = datos_2025_lmm, allow.new.levels = TRUE)
# Crear ranking LMM
ranking_lmm_2025 <- datos_2025_lmm %>%
group_by(country) %>%
summarise(score_2025_lmm = mean(happiness_pred_2025_lmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_lmm)) %>%
mutate(rank_lmm = row_number())
# Crear copia para predicciones GLMM
datos_2025_glmm <- df_unificado
datos_2025_glmm$year <- 2025
# Predecir con el modelo GLMM
datos_2025_glmm$happiness_pred_2025_glmm <- predict(glmm_valido, newdata = datos_2025_glmm, type = "response", allow.new.levels = TRUE)
# Crear ranking GLMM
ranking_glmm_2025 <- datos_2025_glmm %>%
group_by(country) %>%
summarise(score_2025_glmm = mean(happiness_pred_2025_glmm, na.rm = TRUE)) %>%
arrange(desc(score_2025_glmm)) %>%
mutate(rank_glmm = row_number())
ranking_2024 <- df_unificado %>%
filter(year == 2024) %>%
group_by(country) %>%
summarise(score_2024 = mean(happiness_score, na.rm = TRUE)) %>%
arrange(desc(score_2024)) %>%
mutate(rank_2024 = row_number())
library(knitr)
# Unir todos los rankings por país
comparativa_total <- ranking_lmm_2025 %>%
left_join(ranking_glmm_2025, by = "country") %>%
left_join(ranking_2024, by = "country")
# Top 10, España, Bottom 10 (según LMM)
top_10 <- comparativa_total %>% slice_min(rank_glmm, n = 10) %>% mutate(section = "Top 10")
espana <- comparativa_total %>% filter(country == "Spain") %>% mutate(section = "España")
bottom_10 <- comparativa_total %>% slice_max(rank_glmm, n = 10) %>% mutate(section = "Últimos 10")
# Unir top 10, España y bottom 10
tabla_final <- bind_rows(top_10, espana, bottom_10) %>%
# Reordenar columnas para mostrar primero GLMM, luego LMM
select(country,
score_2025_glmm, rank_glmm,
score_2025_lmm, rank_lmm,
score_2024, rank_2024,
section) %>%
# Ordenar por sección y ranking GLMM
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank_glmm)
# Unir todo y mostrar
tabla_final <- tabla_final %>%
select(country,
score_2025_glmm, rank_glmm,
score_2025_lmm, rank_lmm,
score_2024, rank_2024,
section) %>%
arrange(factor(section, levels = c("Top 10", "España", "Últimos 10")), rank_glmm)
kable(tabla_final,
caption = "Comparación del ranking de felicidad en 2025 (LMM y GLMM) y 2024",
col.names = c("País", "Score 2025 (GLMM)", "Ranking 2025 (GLMM)",
"Score 2025 (LMM)", "Ranking 2025 (LMM)",
"Score 2024", "Ranking 2024", "Sección"))
shiny::runApp('App')
setwd("C:/Users/Usuario/OneDrive - Universidad de Oviedo/4 AÑO CIENCIA E INGENIERÍA DE DATOS/Trabajo Fin de Grado/TFG/Documento base")
